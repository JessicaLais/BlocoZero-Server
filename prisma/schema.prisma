generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Enterprise {
  id_entreprise Int      @id @default(autoincrement())
  name           String
  cnpj           String @unique
  address        String
  phone          String
  email          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  users User[]
  works Work[]
}

model User {
  id_user       Int       @id @default(autoincrement())
  enterprise_id Int
  userFunction  String
  email         String
  password      String
  phone         String
  works         String
  hourlyRate    Float
  name          String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean

  enterprise     Enterprise     @relation(fields: [enterprise_id], references: [id_entreprise])
  progressReports ProgressReport[]
  budgetReports   BudgetReport[]
}

model Work {
  id_work       Int       @id @default(autoincrement())
  id_entreprise Int
  id_manager    Int
  id_tender     Int?
  title         String
  cnpj          String
  address       String
  cep           String
  budget        Float
  start_time    DateTime
  end_time      DateTime
  describe      String
  photo         Bytes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  enterprise        Enterprise         @relation(fields: [id_entreprise], references: [id_entreprise])
  resources         Resource[]
  stages            Stage[]
  physicalSchedules PhysicalSchedule[]
  financialSchedules FinancialSchedule[]
  progressReports   ProgressReport[]
}

model Stage {
  id_stage     Int       @id @default(autoincrement())
  id_work      Int?
  name         String
  substage     String
  progress     Float
  expStartDate DateTime
  expEndDate   DateTime
  exeStartDate DateTime?
  exeEndDate   DateTime?

  // relação com Work (corrigida)
  work Work? @relation(fields: [id_work], references: [id_work])

  physicalSchedules  PhysicalSchedule[]
  financialSchedules FinancialSchedule[]
  progressReports    ProgressReport[]
  budgetReports      BudgetReport[]
}

model Resource {
  id_budget      Int      @id @default(autoincrement())
  id_work        Int
  id_category    Int
  id_type        Int
  code           String
  name           String
  unitMeasure    String
  cost           Float
  stockQuantity  Int
  hours          Float
  extraHours     Float
  total          Float
  allocatedStage String
  function       String
  weightLength   Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  work     Work     @relation(fields: [id_work], references: [id_work])
  category Category @relation(fields: [id_category], references: [id_category])
  type     Type     @relation(fields: [id_type], references: [id_type])
  stocks   Stock[]
}

model PhysicalSchedule {
  id_physicalSchedule Int @id @default(autoincrement())
  id_work  Int
  id_stage Int

  work  Work  @relation(fields: [id_work], references: [id_work])
  stage Stage @relation(fields: [id_stage], references: [id_stage])
  financialSchedules FinancialSchedule[]
}

model FinancialSchedule {
  id_financialSchedule Int @id @default(autoincrement())
  id_work              Int
  id_stage             Int
  id_physicalSchedule  Int
  period               DateTime
  percentage           Float
  value                Float

  work              Work              @relation(fields: [id_work], references: [id_work])
  stage             Stage             @relation(fields: [id_stage], references: [id_stage])
  physicalSchedule  PhysicalSchedule  @relation(fields: [id_physicalSchedule], references: [id_physicalSchedule])
}

model EquipmentRequest {
  id_equipment Int @id @default(autoincrement())
  id_type      Int
  id_category  Int
  name         String
  quantity     Int

  type     Type     @relation(fields: [id_type], references: [id_type])
  category Category @relation(fields: [id_category], references: [id_category])
}

model Type {
  id_type Int @id @default(autoincrement())
  name    String

  resources         Resource[]
  equipmentRequests EquipmentRequest[]
  stocks            Stock[]
  budgetReports     BudgetReport[]
}

model ProgressReport {
  id_progressReport Int @id @default(autoincrement())
  id_work  Int
  id_user  Int
  id_stage Int
  title           String
  reportVersion   String
  createdAt       DateTime @default(now())
  substage        String
  weather         String
  startDate       DateTime?
  endDate         DateTime?
  note            String

  work  Work  @relation(fields: [id_work], references: [id_work])
  user  User  @relation(fields: [id_user], references: [id_user])
  stage Stage @relation(fields: [id_stage], references: [id_stage])
}

model BudgetReport {
  id_budgetReport   Int @id @default(autoincrement())
  id_type           Int
  id_user           Int
  id_stage          Int
  title             String
  name              String
  referencePeriod   DateTime
  createdAt         DateTime @default(now())
  overallPercentage Float
  availableBalance  Float
  plannedValue      Float
  executedValue     Float
  financialDeviation Float

  type  Type  @relation(fields: [id_type], references: [id_type])
  user  User  @relation(fields: [id_user], references: [id_user])
  stage Stage @relation(fields: [id_stage], references: [id_stage])
}

model Stock {
  id_stock          Int @id @default(autoincrement())
  id_budget         Int
  id_type           Int
  id_category       Int
  code              String
  name              String
  unitMeasure       String
  stockQuantity     Int
  allocatedStage    String
  weightLength      Float
  recentInflow      Int
  cumulativeInflow  Int
  cumulativeOutflow Int
  recentOutflow     Int
  actualQuantity    Int
  minQuantity       Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  resource Resource @relation(fields: [id_budget], references: [id_budget])
  type     Type     @relation(fields: [id_type], references: [id_type])
  category Category @relation(fields: [id_category], references: [id_category])
  materialUsages MaterialUsage[]
}

model MaterialUsage {
  id_materialUsage Int @id @default(autoincrement())
  id_stock         Int
  employee_name    String
  material_name    String
  useDate          DateTime
  code             Int
  defect           String

  stock Stock @relation(fields: [id_stock], references: [id_stock])
}

model Category {
  id_category Int @id @default(autoincrement())
  name        String

  resources         Resource[]
  equipmentRequests EquipmentRequest[]
  stocks            Stock[]
}
