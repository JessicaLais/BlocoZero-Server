generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Enterprise {
  id        Int      @id @default(autoincrement())
  name      String
  cnpj      String?  @unique
  address   String?
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]
  works     Work[]

  // Rela√ß√£o inversa com managers e tenders
  managers  Manager[]
  tenders   Tender[]
}

model User {
  id            Int        @id @default(autoincrement())
  enterprise_id Int
  userFunction  String      // "manager" | "tender"
  name          String
  email         String      @unique
  password      String
  phone         String?
  hourlyRate    Float    
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  enterprise    Enterprise  @relation(fields: [enterprise_id], references: [id])

  // Rela√ß√µes com cargos
  manager       Manager?
  tender        Tender?

  // Rela√ß√£o inversa com BudgetManagerWork
  budgetManagerWorks BudgetManagerWork[]

  // üî• Adicionei esta linha: rela√ß√£o inversa com Budget
  budgets       Budget[]
}


model Manager {
  id            Int        @id @default(autoincrement())
  user_id       Int        @unique
  enterprise_id Int

  user          User       @relation(fields: [user_id], references: [id])
  enterprise    Enterprise @relation(fields: [enterprise_id], references: [id])
  managerTender ManagerTender[]
}

model Tender {
  id            Int        @id @default(autoincrement())
  user_id       Int        @unique
  enterprise_id Int

  user          User       @relation(fields: [user_id], references: [id])
  enterprise    Enterprise @relation(fields: [enterprise_id], references: [id])
  managerTender ManagerTender[]
  workTenders   WorkTender[]
}

model ManagerTender {
  id         Int     @id @default(autoincrement())
  manager_id Int
  tender_id  Int

  manager    Manager @relation(fields: [manager_id], references: [id])
  tender     Tender  @relation(fields: [tender_id], references: [id])
}

model Work {
  id_work       Int       @id @default(autoincrement())
  id_enterprise Int
  title         String
  cnpj          String
  address       String
  cep           String
  budget        Float
  start_time    DateTime
  end_time      DateTime
  description   String
  photo_url     String?
  isActive      Boolean     @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  enterprise    Enterprise @relation(fields: [id_enterprise], references: [id])
  workTenders   WorkTender[]

  // Rela√ß√£o inversa com BudgetManagerWork
  budgetManagerWorks BudgetManagerWork[]
}

model WorkTender {
  id        Int      @id @default(autoincrement())
  id_work   Int
  id_tender Int
  createdAt DateTime @default(now())

  work      Work     @relation(fields: [id_work], references: [id_work])
  tender    Tender   @relation(fields: [id_tender], references: [id])
}

model Budget {
  id_budget      Int       @id @default(autoincrement())
  code           String
  name           String
  user_id        Int
  type           String
  category       String
  unitMeasure    String
  cost           Float
  stockQuantity  Int
  hoursWorked    Int
  costHours      Float
  extraHours     Float
  total          Float
  allocatedStage String
  function       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relacionamentos
  user           User      @relation(fields: [user_id], references: [id])
  budgetActions  BudgetManagerWork[]
}

model BudgetManagerWork {
  id         Int      @id @default(autoincrement())
  id_manager Int
  id_work    Int
  id_budget  Int
  actionType String
  createdAt  DateTime @default(now())

  // Relacionamentos
  budget   Budget   @relation(fields: [id_budget], references: [id_budget])
  work     Work     @relation(fields: [id_work], references: [id_work])
  manager  User     @relation(fields: [id_manager], references: [id])
}

